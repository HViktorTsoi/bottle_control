"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

import cStringIO as StringIO
import struct

class robot_control_t(object):
    __slots__ = ["utime", "commandid", "robotid", "ndparams", "dparams", "niparams", "iparams", "nsparams", "sparams", "nbparams", "bparams"]

    def __init__(self):
        self.utime = 0
        self.commandid = 0
        self.robotid = 0
        self.ndparams = 0
        self.dparams = []
        self.niparams = 0
        self.iparams = []
        self.nsparams = 0
        self.sparams = []
        self.nbparams = 0
        self.bparams = []

    def encode(self):
        buf = StringIO.StringIO()
        buf.write(robot_control_t._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">qbbb", self.utime, self.commandid, self.robotid, self.ndparams))
        buf.write(struct.pack('>%dd' % self.ndparams, *self.dparams[:self.ndparams]))
        buf.write(struct.pack(">b", self.niparams))
        buf.write(struct.pack('>%db' % self.niparams, *self.iparams[:self.niparams]))
        buf.write(struct.pack(">b", self.nsparams))
        for i0 in range(self.nsparams):
            __sparams_encoded = self.sparams[i0].encode('utf-8')
            buf.write(struct.pack('>I', len(__sparams_encoded)+1))
            buf.write(__sparams_encoded)
            buf.write("\0")
        buf.write(struct.pack(">q", self.nbparams))
        buf.write(self.bparams[:self.nbparams])

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = StringIO.StringIO(data)
        if buf.read(8) != robot_control_t._get_packed_fingerprint():
            raise ValueError("Decode error")
        return robot_control_t._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = robot_control_t()
        self.utime, self.commandid, self.robotid, self.ndparams = struct.unpack(">qbbb", buf.read(11))
        self.dparams = struct.unpack('>%dd' % self.ndparams, buf.read(self.ndparams * 8))
        self.niparams = struct.unpack(">b", buf.read(1))[0]
        self.iparams = struct.unpack('>%db' % self.niparams, buf.read(self.niparams))
        self.nsparams = struct.unpack(">b", buf.read(1))[0]
        self.sparams = []
        for i0 in range(self.nsparams):
            __sparams_len = struct.unpack('>I', buf.read(4))[0]
            self.sparams.append(buf.read(__sparams_len)[:-1].decode('utf-8', 'replace'))
        self.nbparams = struct.unpack(">q", buf.read(8))[0]
        self.bparams = buf.read(self.nbparams)
        return self
    _decode_one = staticmethod(_decode_one)

    _hash = None
    def _get_hash_recursive(parents):
        if robot_control_t in parents: return 0
        tmphash = (0x38f63251f9863f70) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff)  + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if robot_control_t._packed_fingerprint is None:
            robot_control_t._packed_fingerprint = struct.pack(">Q", robot_control_t._get_hash_recursive([]))
        return robot_control_t._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

